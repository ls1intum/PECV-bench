{"type":"programming","id":14712,"title":"H02E02 - Panic at Seal Saloon","shortName":"h02e02","maxPoints":10.0,"bonusPoints":0.0,"assessmentType":"AUTOMATIC","releaseDate":"2024-10-23T17:00:00Z","startDate":"2024-10-23T17:00:00Z","dueDate":"2024-10-30T12:00:00Z","difficulty":"EASY","mode":"INDIVIDUAL","allowComplaintsForAutomaticAssessments":false,"allowFeedbackRequests":false,"includedInOverallScore":"INCLUDED_COMPLETELY","problemStatement":"# H02E02 - Panic at Seal Saloon\n\nSeals have established their delivery business, and it's now time for the seals to scale up to a new Wild West saloon business. They have excellent management and cooking skills and even found a way to serve meals immediately when all the needed ingredients are in stock. Unfortunately, they need your help to make this dream a reality.\n\nEvery hour, the Seal Saloon gets a delivery of fresh Ingredients from the city, which are stored in the stock.\n\n### Project Structure\n\nWe start with the following classes:\n\n- Meal (Fully implemented, represents a meal with ingredients)\n- StockIngredient (An ingredient that can be in the stock)\n- Stock (Needs some changes, The stock inventory with ingredients of the Seal Saloon)\n- Main (For testing)\n- ArrayHelpers (Helper methods to help you modify arrays)\n\nFiles to be created:\n\n- SealSaloon (The most important class representing a saloon selling meals having a stock and producing meals)\n\n### Your tasks:\nThe seals found an external software architect who prepared a class diagram. Implement all classes according to the diagram below. Additionally, add getters for all the private fields. <!-- You can read [this article](https://www.w3schools.com/java/java_encapsulation.asp) to learn more about getters and setters. -->\n<br>\n\n@startuml\n\nclass SealSaloon {\n<color:testsColor(testAttributes[SealSaloon])>-totalOrders: int</color>\n<color:testsColor(testMethods[SealSaloon])>+calculateTotalPrice(Meal): int</color>\n<color:testsColor(testMethods[SealSaloon])>+acceptSupplyDelivery(String, int, int): void</color>\n<color:testsColor(testMethods[SealSaloon])>+orderMeal(Meal): void</color>\n<color:testsColor(testMethods[SealSaloon])>+checkOrderReady(): void</color>\n<color:testsColor(testMethods[SealSaloon])>+calculateRemainingOrderNumber(): void</color>\n}\n\nclass Meal {\n-name: String\n-ingredients: String[]\n+Meal(String, String[])\n}\n\nclass StockIngredient {\n-name: String\n-price: int\n-quantity: int\n+StockIngredient(String, int, int)\n}\n\nclass Stock {\n+add(String): int\n+take(String): int\n+findStockIngredient(String): StockIngredient\n+addToStockIngredients(StockIngredient): void\n+emptyStock(): void\n}\n\nStock -right-> \"*\" StockIngredient :stockIngredients\nSealSaloon -down-> Stock #testsColor(testAttributes[SealSaloon]);line.bold;text:testsColor(testAttributes[SealSaloon]) : stock\nSealSaloon -left-> \"*\" Meal #testsColor(testAttributes[SealSaloon]);line.bold;text:testsColor(testAttributes[SealSaloon]) : orders\n\nhide empty fields\nhide empty methods\nhide circle\n\n@enduml\n\nWe store all the needed ingredients for a Meal as an array with the names of ingredients. For example, a `Cowboy Stew` might have 2 x `\"beans\"`, 1 x `\"bacon\"`, and 2 x `\"potatoes\"`.\n\n1.  [task][Part 1: SealSaloon](testAcceptSupplyDelivery(),Calculate Price of Meal,testAttributes[SealSaloon],testMethods[SealSaloon])\nThe SealSaloon needs two attributes: a modifiable `Meal[]` attribute called `orders` and a `final Stock` stock (meaning that it is read-only after construction). These should be initialized to default values (e.g., an empty array or a new object of the class Stock) in the constructor of `SealSaloon`. Hereby, the constructor takes no parameters.\n\nNow, let's implement all the logic of the new Seal Saloon. We will need `calculateTotalPrice` to calculate the net cost of the meal. `acceptSupplyDelivery` is invoked when our supply chain partner delivers fresh Ingredients for our meals. It takes the name, its price, and the delivered quantity as parameters.\nIt increases the quantity of its corresponding `StockIngredient` object by the given value. Also, handle the case if no ingredient with the given name exists yet: Create a new object and add it to the stock.\n\nTip: It is recommended to make use of the methods in `ArrayHelper`.\n\nNote that the following methods and attributes must be **static**:\n- `stock` attribute: This is shared across all instances of the SealSaloon.\n- `acceptSupplyDelivery` method: This method is related to managing the shared `stock`.\n- `calculateTotalPrice` method: This method uses the shared `stock` to calculate the cost of a meal.\n\nThe attribute `totalOrders` should **not** be static, as it is meant to track the number of orders placed for each specific saloon instance.\n\n2.  [task][Part 2: SealSaloon](testOrderMealWithoutEnoughIngredientsInStock(IOTester),testOrderMealWithEnoughIngredientsInStock(IOTester),testOrderMealAndThenOrderSecondMeal(IOTester),testOrderMealWithMissingIngredients(IOTester),testOrderSeveralDifferentTypesOfMeals(),Calculate Remaining Order Number with Orders,Calculate Remaining Order Number with Empty Orders)\nThe `orderMeal` is used when a customer places a new order. Due to the expected high demand, each order can consist of only one meal. Additionally, to avoid unfair waiting times, all customers are served according to **FIFO (First In, First Out)**, i.e., one cannot get their meal if there is a customer in front of them waiting for their order. The `orderMeal` method should add the meal to the array of orders and then adjust the totalOrders attribute accordingly (Decrementing this attribute is not necessary). After that make a call to the `checkOrderReady()` method, where you will implement the following logic: <br>\nIf all necessary ingredients are in stock, we can instantly cook a Meal and notify the customer that the meal is ready. Write <code class=\"string\">\"The order is ready: [Meal name]\"</code>\ne.g.:\n```txt\nThe order is ready: Cowboy Stew\n```\nIf we successfully cooked a meal, the ingredients are taken from the stock; otherwise, the stock is not changed.\n\n`checkOrderReady()` serves as many meals as possible until either:\n - the order queue is empty or\n - one order cannot be served due to missing ingredients.\n\nIn this case, exit the method. When another customer places an order, `checkOrderReady()` gets called again and tries to serve the orders.\nRemember to remove successful orders from the queue.\n\nAdditionally, implement a method `calculateRemainingOrderNumber()` because seal chefs want to know how long they are going to work. This method should use a **do-while loop** to print the remaining order number. In any case, you should print `Order number: 0`. And after that you should keep printing `Order number: 1`,`Order number: 2` until `Order number: n` where n is the remaining order number.\ne.g.:\n```txt\nOrder number: 0\nOrder number: 1\nOrder number: 2\nOrder number: 3\n```\n\n\nYou can use the `Main` class to test your implementation, it will not be graded.\n\n<style>\ncode.string {\n    background-color: rgba(var(--bs-body-color-rgb), 0.10);;\n    border: 2px;\n    border-radius: 3px;\n    padding: 2px;\n}\n</style>","presentationScoreEnabled":true,"secondCorrectionEnabled":false,"course":{"id":396,"title":"Introduction to Programming (CIT5230000) WS24/25","description":"Master programming in the small using object-oriented programming, realize programs on your own and apply the fundamental concepts of computer science.","shortName":"itp2425","studentGroupName":"artemis-itp2425-students","teachingAssistantGroupName":"artemis-itp2425-tutors","editorGroupName":"artemis-itp2425-editors","instructorGroupName":"artemis-itp2425-instructors","startDate":"2024-10-14T06:00:00Z","endDate":"2025-04-22T12:00:00Z","enrollmentStartDate":"2024-10-14T05:00:00Z","enrollmentEndDate":"2024-11-19T23:00:00Z","unenrollmentEndDate":"2024-11-19T23:00:01Z","semester":"WS24/25","testCourse":false,"defaultProgrammingLanguage":"JAVA","onlineCourse":false,"courseInformationSharingConfiguration":"COMMUNICATION_AND_MESSAGING","courseInformationSharingMessagingCodeOfConduct":"<!-- Code of Conduct Template: Adapt to your demands -->\n<!-- Important: This template will directly be shown on the iOS and Android client if a course has no explicit code of conduct set. -->\n\nWe as students, tutors, and instructors pledge to make participation in our course a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.\n\n## Our Standards\n\n### Examples of behavior that contributes to a positive environment for our community include:\n\n- Demonstrating empathy and kindness toward other people\n- Being respectful of differing opinions, viewpoints, and experiences\n- Giving and gracefully accepting constructive feedback\n- Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience\n- Focusing on what is best not just for us as individuals, but for the overall community\n\n### Examples of unacceptable behavior include:\n\n- The use of sexualized language or imagery, and sexual attention or advances of any kind\n- Trolling, insulting or derogatory comments, and personal or political attacks\n- Public or private harassment\n- Publishing others' private information, such as a physical or email address, without their explicit permission\n- Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Scope\n\nThis Code of Conduct applies within all messages channels.\n\n## Reporting\n\nEach course is represented by instructors. If you see inappropriate behavior or content, please report it.\nYou may find a list of contacts responsible for this course below.\n\n<!-- The responsible users are automatically compiled from the course's instructors -->\n","maxComplaints":3,"maxTeamComplaints":3,"maxComplaintTimeDays":2,"maxRequestMoreFeedbackTimeDays":0,"maxComplaintTextLimit":2000,"maxComplaintResponseTextLimit":2000,"color":"#ffb2b2","courseIcon":"course/icons/396/CourseIcon_2024-09-26T11-51-52-151_acaaa9b8.png","enrollmentEnabled":true,"enrollmentConfirmationMessage":"By enrolling to this course, I confirm:\n1. I **study** at the School of Management (SoM). \n2. I will **strictly follow** the [TUM Digital Learning Commitment](https://portal.mytum.de/archiv/komp_ssz/ArchiveFolder_20201029_163636/20201029_165601), the [Informatics Student Code of Conduct](https://nextcloud.in.tum.de/index.php/s/ZBskKXitEFfFEFf) and the [ITP Student Code of Conduct](https://nextcloud.in.tum.de/index.php/s/JJxKzdAsrymx3SK).\n3. I will **`not` share** course material to third parties.\n\nSlides, recordings, and exercises are copyrighted material. Passing on the materials to third parties is **`not`** permitted. Participation is only possible if you study at the SoM.","unenrollmentEnabled":true,"faqEnabled":true,"accuracyOfScores":1,"restrictedAthenaModulesAccess":false,"timeZone":"Europe/Berlin","learningPathsEnabled":false,"studentCourseAnalyticsDashboardEnabled":false,"requestMoreFeedbackEnabled":false,"complaintsEnabled":true},"plagiarismDetectionConfig":{"continuousPlagiarismControlEnabled":false,"continuousPlagiarismControlPostDueDateChecksEnabled":false,"continuousPlagiarismControlPlagiarismCaseStudentResponsePeriod":7,"similarityThreshold":90,"minimumScore":0,"minimumSize":50},"testRepositoryUri":"https://artemis.cit.tum.de/git/ITP2425H02E02/itp2425h02e02-tests.git","allowOnlineEditor":false,"allowOfflineIde":true,"allowOnlineIde":false,"staticCodeAnalysisEnabled":false,"programmingLanguage":"JAVA","packageName":"de.tum.in.ase","showTestNamesToStudents":false,"testCasesChanged":true,"projectKey":"ITP2425H02E02","projectType":"PLAIN_GRADLE","releaseTestsWithExampleSolution":false,"buildConfig":{"id":14599,"sequentialTestRuns":false,"branch":"main","buildPlanConfiguration":"{\"api\": \"v0.0.1\", \"actions\": [{\"name\": \"tests\", \"script\": \"chmod +x ./gradlew\\n./gradlew clean test\", \"runAlways\": false}, {\"name\": \"setup_working_directory_for_cleanup\", \"script\": \"chmod -R 777 ${WORKDIR}\", \"results\": [{\"name\": \"junit_**/test-results/test/*.xml\", \"path\": \"**/test-results/test/*.xml\", \"type\": \"junit\", \"before\": true}], \"platform\": \"bamboo\", \"runAlways\": true}], \"metadata\": {\"docker\": {\"image\": \"ls1tum/artemis-maven-template:java17-20\", \"volumes\": [\"${WORKDIR}:${WORKDIR}\", \"${TMPDIR}:${TMPDIR}\"], \"parameters\": []}}}","buildScript":"#!/usr/bin/env bash\nset -e\n\ntests () {\n  echo '⚙️ executing tests'\n  chmod +x ./gradlew\n  ./gradlew clean test\n}\n\nmain () {\n  tests\n}\n\nmain \"${@}\"","checkoutSolutionRepository":false,"timeoutSeconds":0,"allowBranching":false,"windfile":{"api":"v0.0.1","metadata":{"docker":{"image":"ls1tum/artemis-maven-template:java17-20","volumes":["${WORKDIR}:${WORKDIR}","${TMPDIR}:${TMPDIR}"]}},"actions":[{"name":"tests","runAlways":false,"script":"chmod +x ./gradlew\n./gradlew clean test"},{"name":"setup_working_directory_for_cleanup","results":[{"name":"junit_**/test-results/test/*.xml","path":"**/test-results/test/*.xml","type":"junit","before":true}],"runAlways":true,"platform":"bamboo","script":"chmod -R 777 ${WORKDIR}"}]}},"type":"programming","exerciseType":"PROGRAMMING","defaultTestCaseVisibility":"ALWAYS","studentAssignedTeamIdComputed":false,"gradingInstructionFeedbackUsed":false,"visibleToStudents":true,"teamMode":false}