diff -ruN a/problem-statement.md b/problem-statement.md
--- a/problem-statement.md	2025-07-11 10:16:28
+++ b/problem-statement.md	2025-07-23 11:36:02
@@ -26,7 +26,7 @@
 
 class SealSaloon {
 <color:testsColor(testAttributes[SealSaloon])>-totalOrders: int</color>
-<color:testsColor(testMethods[SealSaloon])>+calculateTotalPrice(Meal): int</color>
+<color:testsColor(testMethods[SealSaloon])>+calculateTotalPrice(Meal): double</color>
 <color:testsColor(testMethods[SealSaloon])>+acceptSupplyDelivery(String, int, int): void</color>
 <color:testsColor(testMethods[SealSaloon])>+orderMeal(Meal): void</color>
 <color:testsColor(testMethods[SealSaloon])>+checkOrderReady(): void</color>
@@ -69,7 +69,7 @@
 1.  [task][Part 1: SealSaloon](testAcceptSupplyDelivery(),Calculate Price of Meal,testAttributes[SealSaloon],testMethods[SealSaloon])
 The SealSaloon needs two attributes: a modifiable `Meal[]` attribute called `orders` and a `final Stock` stock (meaning that it is read-only after construction). These should be initialized to default values (e.g., an empty array or a new object of the class Stock) in the constructor of `SealSaloon`. Hereby, the constructor takes no parameters.
 
-Now, let's implement all the logic of the new Seal Saloon. We will need `calculateTotalPrice` to calculate the net cost of the meal. `acceptSupplyDelivery` is invoked when our supply chain partner delivers fresh Ingredients for our meals. It takes the name, its price, and the delivered quantity as parameters.
+Now, let's implement all the logic of the new Seal Saloon. We will need `calculateTotalPrice` to calculate the net cost of the meal with double precision for accurate financial calculations. `acceptSupplyDelivery` is invoked when our supply chain partner delivers fresh Ingredients for our meals. It takes the name, its price, and the delivered quantity as parameters.
 It increases the quantity of its corresponding `StockIngredient` object by the given value. Also, handle the case if no ingredient with the given name exists yet: Create a new object and add it to the stock.
 
 Tip: It is recommended to make use of the methods in `ArrayHelpers`.
