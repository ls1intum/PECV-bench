{"type":"programming","id":14628,"title":"H01E01 - Lectures","shortName":"h01e01","maxPoints":10.0,"bonusPoints":0.0,"assessmentType":"AUTOMATIC","releaseDate":"2024-10-16T17:00:00Z","startDate":"2024-10-16T17:00:00Z","dueDate":"2024-10-23T11:00:00Z","difficulty":"EASY","mode":"INDIVIDUAL","allowComplaintsForAutomaticAssessments":false,"allowFeedbackRequests":false,"includedInOverallScore":"INCLUDED_COMPLETELY","problemStatement":"# H01E02 - Lectures\n\nIn this exercise we will implement a class that represents a lecture.\n\n### Project Structure\nIn the template repository folder `src/de/tum/in/ase` you can find a `Lecture` class where you have to add code and a `Main` class where you can test your implementation.\n\n---\n\n### Part 1: Attributes and Constructor\n\nFirst, we need to add attributes and a constructor to our `Lecture` class.\n\n**You have the following tasks:**\n\n1. [task][Add Attributes to Lecture Class](testAttributes[Lecture])\nTake a look at the UML Diagram below and add the corresponding attributes: `lectureName`, `numberOfInscribedStudents`, `numberOfGuestStudents`, `numberOfLecturers` and `numberOfTutors`.\n\n2. [task][Implement a Constructor for Lecture Class](testConstructors[Lecture])\nCreate a constructor that initializes every attribute of the `Lecture` class. Pay attention to the order of the attributes in the constructor, and make sure it follows the same order from the UML diagram.\n\n---\n\n### Part 2: Methods\n\nOur next step is to implement getters, setters and a few additional methods.\n\n**You have the following tasks:**\n\n1. [task][Implement Getters](getLectureNameTest(),getNumberOfInscribedStudentsTest(),getNumberOfGuestStudentsTest(),getNumberOfLecturersTest(),getNumberOfTutorsTest())\nImplement getters for each attribute of the `Lecture` class.\n\n2. [task][Implement Setters](setLectureNameTest(),setNumberOfInscribedStudentsTest(),setNumberOfGuestStudentsTest(),setNumberOfLecturersTest(),setNumberOfTutorsTest())\nImplement setters for each attribute of the `Lecture` class.\n\n3. [task][Implement Custom String](toStringTest())\nImplement a custom `toString()` method which describes the lecture in detail. It has to make use of every attribute, but feel free to format it as you like.\nThe `toString()` method can look like this: <code class=\"string\">Lecture{lectureName='Introduction to Programming', numberOfInscribedStudents='600', numberOfGuestStudents='200', numberOfLecturers='14', numberOfTutors='40'}</code>\n\n4. [task][Implement Total Number of Students](getTotalNumberOfStudentsTest())\nImplement a `getTotalNumberOfStudents()` method which returns the total number of students. (Tip: Check the expected return type in the UML diagram.)\n\n5. [task][Implement Lecture Name and Total Number of Students](getNameAndTotalNumberOfStudentsTest())\nImplement a `getNameAndTotalNumberOfStudents()` method which returns a String of the following format `LectureName (TotalNumberOfStudents)`\n\n6. [task][Implement Number of Students Per Tutor](getNumberOfStudentsPerTutorTest())\nImplement a `getNumberOfStudentsPerTutor()` method which returns the number of students per tutor calculated using the total number of students.\n\n7. [task][Implement Add Guest Students](addGuestStudentsTest())\nImplement a `addGuestStudents(int)` method which adds a new number of guest students to the lecture.\n\n---\n\n### Part 3: Test your implementation (optional)\n\nIn the Main class you can find the main function in which you can test your implementation of the *Lecture* class. Initialize a Lecture by calling the constructor and test your methods.\n\n\n@startuml\nhide circles\nhide empty members\n\nclass Lecture {\n    <color:testsColor(testAttributes[Lecture])>-lectureName: String</color>\n    <color:testsColor(testAttributes[Lecture])>-numberOfInscribedStudents: int</color>\n    <color:testsColor(testAttributes[Lecture])>-numberOfGuestStudents: int</color>\n    <color:testsColor(testAttributes[Lecture])>-numberOfLecturers: int</color>\n    <color:testsColor(testAttributes[Lecture])>-numberOfTutors: int</color>\n    \n      <color:testsColor(getTotalNumberOfStudentsTest())>+getTotalNumberOfStudents(): int</color>\n      <color:testsColor(getNameAndTotalNumberOfStudentsTest())>+getNameAndTotalNumberOfStudents(): String</color>\n      <color:testsColor(getNumberOfStudentsPerTutorTest())>+getNumberOfStudentsPerTutor(): int</color>\n      <color:testsColor(addGuestStudentsTest())>+addGuestStudents(int): void</color>\n}\n\n@enduml\n\n<style>\ncode.string {\n    background-color: rgba(var(--bs-body-color-rgb), 0.10);;\n    border: 2px;\n    border-radius: 3px;\n    padding: 2px;\n}\n</style>","presentationScoreEnabled":true,"secondCorrectionEnabled":false,"course":{"id":396,"title":"Introduction to Programming (CIT5230000) WS24/25","description":"Master programming in the small using object-oriented programming, realize programs on your own and apply the fundamental concepts of computer science.","shortName":"itp2425","studentGroupName":"artemis-itp2425-students","teachingAssistantGroupName":"artemis-itp2425-tutors","editorGroupName":"artemis-itp2425-editors","instructorGroupName":"artemis-itp2425-instructors","startDate":"2024-10-14T06:00:00Z","endDate":"2025-04-22T12:00:00Z","enrollmentStartDate":"2024-10-14T05:00:00Z","enrollmentEndDate":"2024-11-19T23:00:00Z","unenrollmentEndDate":"2024-11-19T23:00:01Z","semester":"WS24/25","testCourse":false,"defaultProgrammingLanguage":"JAVA","onlineCourse":false,"courseInformationSharingConfiguration":"COMMUNICATION_AND_MESSAGING","courseInformationSharingMessagingCodeOfConduct":"<!-- Code of Conduct Template: Adapt to your demands -->\n<!-- Important: This template will directly be shown on the iOS and Android client if a course has no explicit code of conduct set. -->\n\nWe as students, tutors, and instructors pledge to make participation in our course a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.\n\n## Our Standards\n\n### Examples of behavior that contributes to a positive environment for our community include:\n\n- Demonstrating empathy and kindness toward other people\n- Being respectful of differing opinions, viewpoints, and experiences\n- Giving and gracefully accepting constructive feedback\n- Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience\n- Focusing on what is best not just for us as individuals, but for the overall community\n\n### Examples of unacceptable behavior include:\n\n- The use of sexualized language or imagery, and sexual attention or advances of any kind\n- Trolling, insulting or derogatory comments, and personal or political attacks\n- Public or private harassment\n- Publishing others' private information, such as a physical or email address, without their explicit permission\n- Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Scope\n\nThis Code of Conduct applies within all messages channels.\n\n## Reporting\n\nEach course is represented by instructors. If you see inappropriate behavior or content, please report it.\nYou may find a list of contacts responsible for this course below.\n\n<!-- The responsible users are automatically compiled from the course's instructors -->\n","maxComplaints":3,"maxTeamComplaints":3,"maxComplaintTimeDays":2,"maxRequestMoreFeedbackTimeDays":0,"maxComplaintTextLimit":2000,"maxComplaintResponseTextLimit":2000,"color":"#ffb2b2","courseIcon":"course/icons/396/CourseIcon_2024-09-26T11-51-52-151_acaaa9b8.png","enrollmentEnabled":true,"enrollmentConfirmationMessage":"By enrolling to this course, I confirm:\n1. I **study** at the School of Management (SoM). \n2. I will **strictly follow** the [TUM Digital Learning Commitment](https://portal.mytum.de/archiv/komp_ssz/ArchiveFolder_20201029_163636/20201029_165601), the [Informatics Student Code of Conduct](https://nextcloud.in.tum.de/index.php/s/ZBskKXitEFfFEFf) and the [ITP Student Code of Conduct](https://nextcloud.in.tum.de/index.php/s/JJxKzdAsrymx3SK).\n3. I will **`not` share** course material to third parties.\n\nSlides, recordings, and exercises are copyrighted material. Passing on the materials to third parties is **`not`** permitted. Participation is only possible if you study at the SoM.","unenrollmentEnabled":true,"faqEnabled":true,"accuracyOfScores":1,"restrictedAthenaModulesAccess":false,"timeZone":"Europe/Berlin","learningPathsEnabled":false,"studentCourseAnalyticsDashboardEnabled":false,"requestMoreFeedbackEnabled":false,"complaintsEnabled":true},"plagiarismDetectionConfig":{"continuousPlagiarismControlEnabled":false,"continuousPlagiarismControlPostDueDateChecksEnabled":false,"continuousPlagiarismControlPlagiarismCaseStudentResponsePeriod":7,"similarityThreshold":90,"minimumScore":0,"minimumSize":50},"testRepositoryUri":"https://artemis.cit.tum.de/git/ITP2425H01E01/itp2425h01e01-tests.git","allowOnlineEditor":false,"allowOfflineIde":true,"allowOnlineIde":false,"staticCodeAnalysisEnabled":false,"programmingLanguage":"JAVA","packageName":"de.tum.cit.ase","showTestNamesToStudents":false,"testCasesChanged":true,"projectKey":"ITP2425H01E01","projectType":"PLAIN_GRADLE","releaseTestsWithExampleSolution":false,"buildConfig":{"id":14535,"sequentialTestRuns":false,"branch":"main","buildPlanConfiguration":"{\"api\":\"v0.0.1\",\"metadata\":{\"docker\":{\"image\":\"ls1tum/artemis-maven-template:java17-20\",\"volumes\":[\"${WORKDIR}:${WORKDIR}\",\"${TMPDIR}:${TMPDIR}\"],\"parameters\":[\"--cpus\",\"\\\"2\\\"\",\"--memory\",\"\\\"2g\\\"\",\"--memory-swap\",\"\\\"2g\\\"\",\"--pids-limit\",\"\\\"1000\\\"\"]}},\"actions\":[{\"script\":\"chmod +x ./gradlew\\n./gradlew clean test tiaTests --run-all-tests\",\"name\":\"tests\",\"runAlways\":false},{\"script\":\"chmod -R 777 ${WORKDIR}\",\"name\":\"setup_working_directory_for_cleanup\",\"results\":[{\"name\":\"testwiseCoverageReport\",\"path\":\"build/reports/testwise-coverage/tiaTests/tiaTests.json\",\"type\":\"testwise-coverage\",\"before\":false},{\"name\":\"junit_**/test-results/test/*.xml\",\"path\":\"**/test-results/test/*.xml\",\"type\":\"junit\",\"before\":true}],\"runAlways\":true,\"platform\":\"bamboo\"}]}","buildScript":"#!/usr/bin/env bash\nset -e\n\ntests () {\n  echo '⚙️ executing tests'\n  chmod +x ./gradlew\n  ./gradlew clean test tiaTests --run-all-tests\n}\n\nmain () {\n  tests\n}\n\nmain \"${@}\"","checkoutSolutionRepository":false,"timeoutSeconds":0,"allowBranching":false,"windfile":{"api":"v0.0.1","metadata":{"docker":{"image":"ls1tum/artemis-maven-template:java17-20","volumes":["${WORKDIR}:${WORKDIR}","${TMPDIR}:${TMPDIR}"],"parameters":["--cpus","\"2\"","--memory","\"2g\"","--memory-swap","\"2g\"","--pids-limit","\"1000\""]}},"actions":[{"name":"tests","runAlways":false,"script":"chmod +x ./gradlew\n./gradlew clean test tiaTests --run-all-tests"},{"name":"setup_working_directory_for_cleanup","results":[{"name":"testwiseCoverageReport","path":"build/reports/testwise-coverage/tiaTests/tiaTests.json","type":"testwise-coverage","before":false},{"name":"junit_**/test-results/test/*.xml","path":"**/test-results/test/*.xml","type":"junit","before":true}],"runAlways":true,"platform":"bamboo","script":"chmod -R 777 ${WORKDIR}"}]}},"type":"programming","exerciseType":"PROGRAMMING","defaultTestCaseVisibility":"ALWAYS","studentAssignedTeamIdComputed":false,"gradingInstructionFeedbackUsed":false,"visibleToStudents":true,"teamMode":false}