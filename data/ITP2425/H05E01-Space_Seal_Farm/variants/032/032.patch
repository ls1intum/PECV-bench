diff -ruN a/problem-statement.md b/problem-statement.md
--- a/problem-statement.md	2025-07-25 14:28:42
+++ b/problem-statement.md	2025-07-25 21:20:51
@@ -94,20 +94,20 @@
 - The method `messageOnRide()` should return <code class= "string"> "Riding on [Animal Type] [name]" </code>
 
 1. [task][Implement the Seal class](testClass[Seal],testConstructors[Seal],testMethods[Seal],feedSealTest(),milkSealTest(),rideSealTest())
-    Implement the class `Seal` according to the UML diagram. A seal is an `Animal` which is `Rideable` and `Milkable`, and `messageOnFeed()` should return <code class="string">"Arf Arf!"</code>
+    Implement the class `Seal` according to the UML diagram. A seal is an `Animal` which is `Rideable` and `Milkable`, and `getFeedingSound()` should return <code class="string">"Arf Arf!"</code>
 
 2. [task][Implement the Pig class](testClass[Pig],testConstructors[Pig],testMethods[Pig],feedPigTest(),ridePigTest())
-    Implement the class `Pig` according to the UML diagram. A pig is a `Rideable` `Animal`, and `messageOnFeed()` should return <code class="string">"Oink!"</code>
+    Implement the class `Pig` according to the UML diagram. A pig is a `Rideable` `Animal`, and `getFeedingSound()` should return <code class="string">"Oink!"</code>
 
 3. [task][Implement the Goat class](testClass[Goat],testConstructors[Goat],testMethods[Goat],feedGoatTest(),milkGoatTest())
-    Implement the class `Goat` according to the UML diagram. A goat is a `Milkable` `Animal`, and `messageOnFeed()` should return <code class="string">"Maah!"</code>
+    Implement the class `Goat` according to the UML diagram. A goat is a `Milkable` `Animal`, and `getFeedingSound()` should return <code class="string">"Maah!"</code>
 
 ### Part 3
 
 1. [task][Implement the Farm class](testMethods[Farm],testAttributes[Farm],farmConstructs(),getAnimalsTest())
     Implement the class `Farm` according to the UML diagram. In a farm, there are a list of animals. The aggregation between Farm and Animal is realized using a `List`, implemented using an `ArrayList`. Initialize the ArrayList in a constructor with no arguments. Also, don't forget to implement a `getter` and a `setter`.
     - `addAnimal(Animal a)` adds an animal to the list. 
-    - `feedAllAnimals()` calls `messageOnFeed()` on all animals in the Farm, printing out the message for each animal.
+    - `feedAllAnimals()` calls `getFeedingSound()` on all animals in the Farm, printing out the message for each animal.
 
 2. [task][Play the Song](testMethods[Farm],executeSongMethod(IOTester)) 
     Implement the method `singFarmSong()` inside `Farm.java`, which prints the **Old MacDonald had a Farm** song. Your song must be printed correctly for a farm with any number of animals. The song consists of multiple verses, where each verse is sung by one Animal. A verse looks like this:
@@ -119,19 +119,19 @@
     And on his farm he had some [Animal Type]s
     Ee i ee i oh
     With a 
-    [messageOnFeed() Return value]
-    [messageOnFeed() Return value]
+    [getFeedingSound() Return value]
+    [getFeedingSound() Return value]
     here, and a 
-    [messageOnFeed() Return value]
-    [messageOnFeed() Return value]
+    [getFeedingSound() Return value]
+    [getFeedingSound() Return value]
     there.
     Here a 
-    [messageOnFeed() Return value]
+    [getFeedingSound() Return value]
     There a 
-    [messageOnFeed() Return value]
+    [getFeedingSound() Return value]
     Everywhere a 
-    [messageOnFeed() Return value]
-    [messageOnFeed() Return value]
+    [getFeedingSound() Return value]
+    [getFeedingSound() Return value]
     Old MacDonald had a farm
     Ee i ee i o
 ```
